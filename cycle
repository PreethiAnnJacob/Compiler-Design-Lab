CS 431: COMPILER DESIGN LAB
CYCLE 1	Timeline
1	Design and implement a lexical analyzer for given language using C and the lexical
analyzer should ignore redundant spaces, tabs and new lines.	Day 1
2	Write a program to convert NFA to DFA	Day 1
3	Write a program to find ε – closure of all states of any given NFA with ε transition.	Day 2
4	Write a program to convert NFA with ε transition to NFA without ε transition.	Day 2
5	Write a program to minimize any given DFA.	Day 3
6
	Construct a Recursive Descent Parser for an expression
E->E+T|T
T->T*F|F
F->(E)|id
Your program will first check whether a grammar is left recursive is not. If it is left recursive, eliminate left recursion and implement RD parser.	Day 4
7	Write program to find Simulate FIRST and FOLLOW of any given grammar.	Day 5
CYCLE 2	
          8	Develop an operator precedence parser for a given language for the grammar
E->E+T|T
T->T*F|F
F->(E)|id
First construct operator precedence parsing table and using the parsing table, perform parsing of an input string	Day 6
9	Construct a Shift Reduce Parser for a given language
E->E+T|T
T->T*F|F
F->(E)|id	Day 7
10	Implement Intermediate code generation for simple expressions.	Day 8
11	Write a program to perform constant propagation and loop unrolling	Day 9
12	Implement the back end of the compiler which takes the three address code and
produces the 8086 assembly language instructions that can be assembled and run
using an 8086 assembler. The target assembly instructions can be simple move, add,
sub, jump etc.	Day 10
13	Generate YACC specification for a few syntactic categories.
a) Program to recognize a valid arithmetic expression that uses operator +, – , * and
/.
b) Program to recognize a valid variable which starts with a letter followed by any
number of letters or digits.
c) Implementation of Calculator using LEX and YACC
d) Convert the BNF rules into YACC form and write code to generate abstract
syntax tree	Day 11
14	Implement Lexical analyser using LEX	Day 12

